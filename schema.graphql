enum AvailableAction {
  CONFIRM_GAME_END
  CONFIRM_ROUND_END
  DISCARD
  DRAW
  SELF_PICK
}

# Autogenerated input type of CreateRoom
input CreateRoomInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateRoom
type CreateRoomPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewer: Viewer
}

# Autogenerated input type of CreateUser
input CreateUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  name: String!
}

# Autogenerated return type of CreateUser
type CreateUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewer: Viewer
}

type Game {
  id: ID!
  wall: Wall!
  seats: [Wall]!
  availableAtions: [AvailableAction]!
}

# Autogenerated input type of JoinRoom
input JoinRoomInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID!
}

# Autogenerated return type of JoinRoom
type JoinRoomPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  viewer: Viewer
}

type Mutation {
  # Create user
  CreateUser(input: CreateUserInput!): CreateUserPayload
  CreateRoom(input: CreateRoomInput!): CreateRoomPayload
  JoinRoom(input: JoinRoomInput!): JoinRoomPayload
}

enum MutationEnum {
  CREATED
  UPDATED
  DELETED
}

# The query root of this schema
type Query {
  viewer: Viewer
}

type Room {
  id: ID!

  # Get all User
  users: [User]
  usersCount: Int!
  game: Game
}

type Subscription {
  roomSubscribe: roomSubscribe
}

type Tile {
  id: ID!
  kind: String
  order: Int
}

type User {
  id: ID!
  name: String
}

type Viewer {
  id: ID!
  name: String!
  rooms: [Room]!
  room: Room
}

type Wall {
  tiles: [Tile]!
}

type roomSubscribe {
  mutation: MutationEnum!
  node: Room!
}